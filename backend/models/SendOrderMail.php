<?php
namespace backend\models;

use common\models\Order;
use yii\base\Model;
use common\helpers\ArrayHelper;
use Yii;

class SendOrderMail extends Model
{
    public $orderId;

    public $subject;
    public $text;

    public $email;
    public $recipients = [];


    public function rules()
    {
        return [
            [['subject', 'text'], 'string'],
            [['subject',], 'required'],
	        ['email', 'email'],
	        [['recipients'], 'each', 'rule'=>['email']],

        ];
    }

        public function attributeLabels()
    {
        $labels = [
            'subject' => Yii::t('app', 'Temat'),
            'text' => Yii::t('app', 'Treść'),
	        'recipients' => Yii::t('app', 'Adresaci'),
        ];

        return array_merge(parent::attributeLabels(), $labels);
    }

    public function getRecipientsList()
    {
    	$data = [];
    	$order = Order::findOne($this->orderId);

    	if ($order !== null) {
            if ($order->company != null) {
                $contacts2 = ArrayHelper::map($order->company->contacts, 'id', 'email');
                if (empty($order->company->email) == false) {
                    $contacts2[] = $order->company->email;
                }
                $data = array_merge($data, $contacts2);
                $data = array_filter($data);
                $data = array_unique($data);
            }
	    }
	    $data = array_combine($data, $data);

	    return $data;
    }

    public function beforeValidate() {
    	if(empty($this->email)==false)
	    {
            if (empty($this->recipients))
            {
                $this->recipients = array();
                $this->recipients[$this->email]=$this->email;
            }else{
                $this->recipients[$this->email] = $this->email;
            }
	    }

	    if (empty($this->email) && empty($this->recipients))
	    {
	    	$this->addError('email', Yii::t('app', 'Brak adresata'));
	    }
	    return parent::beforeValidate(); // TODO: Change the autogenerated stub
    }
}