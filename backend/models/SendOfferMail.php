<?php
namespace backend\models;

use common\models\Offer;
use yii\base\Model;
use common\helpers\ArrayHelper;
use Yii;

class SendOfferMail extends Model
{
    public $offerId;

    public $subject;
    public $text;
    public $attachPDF;
    public $attachExcel;

    public $email;
    public $recipients = [];


    public function rules()
    {
        return [
            [['subject', 'text', 'email'], 'string'],
            [['attachPDF', 'attachExcel'], 'integer'],
            [['subject',], 'required'],
	        [['recipients'], 'each', 'rule'=>['email']],

        ];
    }

        public function attributeLabels()
    {
        $labels = [
            'subject' => Yii::t('app', 'Temat'),
            'text' => Yii::t('app', 'Treść'),
            'attachPDF' => Yii::t('app', 'załącz PDF'),
            'attachExcel' => Yii::t('app', 'załącz XLS'),
	        'recipients' => Yii::t('app', 'Adresaci'),
        ];

        return array_merge(parent::attributeLabels(), $labels);
    }

    public function updateEvent()
    {
        $model = Offer::findOne($this->offerId);
        if ($model!== null && $model->event !== null)
        {
            $model->event->offerHasBeenSent(true);
        }
    }

    public function getRecipientsList()
    {
    	$data = [];
    	$offer = Offer::findOne($this->offerId);

    	if ($offer !== null) {
    	    if ($offer->event !== null) {
                $model = $offer->event;
                if ($model->customer !== null) {
                    $contacts = ArrayHelper::map($model->customer->contacts, 'id', 'email');
                    if (empty($model->customer->email) == false) {
                        $contacts[] = $model->customer->email;
                    }
                    if ($model->manager != null && $model->manager->email != null) {
                        $contacts[] = $model->manager->email;
                    }
                    $data = array_merge($data, $contacts);
                    $data = array_filter($data);
                    $data = array_unique($data);
                }
            }
            if ($offer->customer != null) {
                $contacts2 = ArrayHelper::map($offer->customer->contacts, 'id', 'email');
                if (empty($offer->customer->email) == false) {
                    $contacts2[] = $offer->customer->email;
                }
                if ($offer->manager != null && $offer->manager->email != null) {
                    $contacts2[] = $offer->manager->email;
                }
                $data = array_merge($data, $contacts2);
                $data = array_filter($data);
                $data = array_unique($data);
            }
	    }
	    $data = array_combine($data, $data);

	    return $data;
    }

    public function beforeValidate() {
    	if(empty($this->email)==false)
        {
            
            $recipients = explode(";",str_replace(" ", "", str_replace(",", ";", $this->email)));
            if (empty($this->recipients))
            {
                $this->recipients = array();
            }
            foreach ($recipients as $r)
            {
                $this->recipients[] = $r;
            }
            
        }

	    if (empty($this->email) && empty($this->recipients))
	    {
	    	$this->addError('email', Yii::t('app', 'Brak adresata'));
	    }
	    return parent::beforeValidate(); // TODO: Change the autogenerated stub
    }
}