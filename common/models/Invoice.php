<?php

namespace common\models;

use backend\modules\finances\Module;
use common\helpers\ArrayHelper;
use kartik\mpdf\Pdf;
use Yii;
use \common\models\base\Invoice as BaseInvoice;
use yii\db\Expression;
use common\helpers\Inflector;
use yii\helpers\VarDumper;

/**
 * This is the model class for table "invoice".
 */
class Invoice extends BaseInvoice
{
    public $summary;

    const TYPE_INVOICE = 0;
    const TYPE_ADVANCE = 5;
    const TYPE_FINAL = 10;
    const TYPE_CORRECTION_ITEMS = 15;
    const TYPE_CORRECTION_DATA = 20;
    const TYPE_PROFORMA = 25;

    const PAYMENTMETHOD_CASH = 'cash';// - gotówka
    const PAYMENTMETHOD_TRANSFER = 'transfer';// - przelew
    const PAYMENTMETHOD_COMPENSATION = 'compensation';// - kompensata
    const PAYMENTMETHOD_COD = 'cod';// - za pobraniem
    const PAYMENTMETHOD_CARD = 'payment_card';// - kartą płatniczą

	const OWNER_TYPE_EVENT = 1;
	const OWNER_TYPE_RENT = 2;
	const OWNER_TYPE_NONE = NULL;

//    public $paid;

    public $paymentDatePeriod;

    public function rules()
    {
        $rules = [
            [['paid'], 'boolean'],
            [['customer_id', 'date', 'disposaldate', 'paymentdate'], 'required'],
            [['owner_id'], 'integer'],
            [['owner_id'], 'safe'],
        ];
        return array_merge(parent::rules(), $rules);
    }

    public static function getTypeList()
    {
        return [
          self::TYPE_INVOICE => Yii::t('app', 'Faktura'),
            self::TYPE_ADVANCE => Yii::t('app', 'Faktura zaliczkowa'),
            self::TYPE_FINAL => Yii::t('app', 'Faktura końcowa'),
            self::TYPE_CORRECTION_ITEMS => Yii::t('app', 'Faktura korygująca pozycje faktury'),
            self::TYPE_CORRECTION_DATA => Yii::t('app', 'Faktura korygująca dane formalne'),
            self::TYPE_PROFORMA => Yii::t('app', 'Faktura pro forma'),
        ];
    }

    public function getTypeLabel()
    {
        $list = static::getTypeList();
        $index = $this->type;
        return ArrayHelper::getValue($list, $index, UNDEFINDED_STRING);
    }

    public static function getPaymentmethodList()
    {
        return Paymentmethod::getModelList();
    }

    public function getCurrencyList() {
	    $currencies = Module::getCurrencyList();
	    if (!key_exists($this->currency, $currencies)) {
		    $currencies[$this->currency] = $this->currency;
	    }

	    return $currencies;
    }

    public function getPaymentmethodLabel()
    {
        if ($this->paymentmethod_id==null)
        {
            $this->paymentmethod_id = 1;
        }
        return $this->paymentmethod0->name;
    }

    public function attributeLabels()
    {
        $labels = [
            'paid' => Yii::t('app', 'Zapłacono całość'),
	        'owner_id' => Yii::t('app', 'Przypisany do'),
            'owner_type' => Yii::t('app', 'Przypisanie'),
            'ownerCode'=>Yii::t('app', 'Przypisany do'),
        ];
        return array_merge(parent::attributeLabels(), $labels);
    }

    public function beforeValidate()
    {

        return parent::beforeValidate(); // TODO: Change the autogenerated stub
    }

    public function beforeSave($insert)
    {
	    if ($this->owner_id==null)
	    {
		    $this->owner_type = static::OWNER_TYPE_NONE;
		    $this->owner_class = null;
	    }

    	if ($this->owner !== null)
	    {
	    	$event = $this->owner;
		    $name = $event->getDisplayLabel();

		    if (preg_match('@'.preg_quote($name, '@').'@', $this->description)==false)
		    {
		    	$this->description = $name."\n".$this->description;
		    }
	    }
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function countPayments()
    {
        $sum = 0;
        foreach($this->invoicePaymentHistories as $payment)
        {
            $sum +=$payment->amount;
        }
        $this->alreadypaid = $sum;
        $this->remaining = $this->total - $this->alreadypaid;
        if ($this->alreadypaid>=$this->total)
        {
            $this->paid = 1;
        }else{
            $this->paid = 0;
        }
        $this->save();
    }



    public function attributesUpdate()
    {
        if ($this->number===null)
        {
            if ($this->date == null)
            {
                $this->date = date('Y-m-d');
            }
            $date = \DateTime::createFromFormat('Y-m-d', $this->date);
            $this->day = $date->format('d');
            $this->month = $date->format('n');
            $this->year = $date->format('Y');

            $this->number = InvoiceSerie::getNextNumber($this);
        }

        if ($this->series === null)
        {
            $this->fullnumber = InvoiceSerie::getDefaultFullNumber($this);
        }
        else
        {
            $this->fullnumber = $this->series->getFullNumber($this);
        }



        $query = $this->getInvoiceContents();
        $query->select([
            'price'=>new Expression('sum(price)'),
            'tax'=>new Expression('sum(tax)'),
            'netto'=>new Expression('sum(netto)'),
            'brutto'=>new Expression('sum(brutto)'),
            'discount'=>new Expression('sum(discount)'),
        ]);

        $summary = $query->asArray()->one();
        if ($this->type==static::TYPE_CORRECTION_ITEMS)
        {
            $query = $this->parent->getInvoiceContents();
            $query->select([
            'price'=>new Expression('sum(price)'),
            'tax'=>new Expression('sum(tax)'),
            'netto'=>new Expression('sum(netto)'),
            'brutto'=>new Expression('sum(brutto)'),
            'discount'=>new Expression('sum(discount)'),
            ]);

            $summary2 = $query->asArray()->one();
            $this->tax = $summary['tax']-$summary2['tax'];
            $this->netto = $summary['netto']-$summary2['netto'];
            $this->total = $summary['brutto']-$summary2['brutto'];
        }else{
            $this->tax = $summary['tax'];
            $this->netto = $summary['netto'];
            $this->total = $summary['brutto'];
        }


        if ($this->alreadypaid_initial==null)
        {
            $this->alreadypaid_initial = $this->alreadypaid;
        }
        if ($this->paid==1)
        {
            $this->alreadypaid = $this->total;
        }
        $this->remaining = $this->total - $this->alreadypaid;
        if ($this->remaining <= 0)
        {
            $this->paid = 1;
        }
    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes);


        if ($this->owner !== null && $this->owner_type==static::OWNER_TYPE_EVENT)
        {
            $event = $this->owner;
            $event->invoice_id = $this->id;
//            $event->invoice_number = $this->fullnumber;
            $event->updateInvoiceNumbers();
//            $event->invoice_issued = 1;

            if ($this->paid==1)
            {
                $event->transfer_booked = 1;
            }
            else
            {
                $event->transfer_booked = 0;
            }

            $event->updateIvoiceIssued();
            $event->updateProjectPaid();

            $event->save();
            if ($insert)
                Note::createNote(2, 'eventInvoiceAdded', $this, $event->id);


        }else{
            if ($insert)
                Note::createNote(4, 'invoiceAdded', $this, $this->customer_id);
        }
    }

    public function send()
    {
        if($this->event)
        {
            $this->event->invoice_sent = true;
            $this->event->save();
        }
        

    }

    public function loadPdf()
    {

        $settings = Yii::$app->settings;
        $data = $this->loadData();
        $model = $data['model'];
        $tmpModel = new static();
        $tmpContent = new InvoiceContent();
        $type =  ArrayHelper::getValue(\common\models\Invoice::getTypeList(), $model['type'], Yii::t('app', 'Faktura'));
        $data2 = null;
        if (in_array($this->type, [Invoice::TYPE_CORRECTION_DATA, Invoice::TYPE_CORRECTION_ITEMS]) && $this->parent_id) {
            $parentInvoice = \common\models\Invoice::findOne($this->parent_id);
            $data2 = $parentInvoice->loadData();
        }
        $content = Yii::$app->view->render('@backend/modules/finances/views/invoice/_content', ['model'=>$model, 'data'=>$data, 'tmpModel'=>$tmpModel, 'tmpContent'=>$tmpContent, 'data2'=>$data2]);
        $pdf = new Pdf([
            // set to use core fonts only
            'mode' => Pdf::MODE_UTF8,
            // A4 paper format
            'format' => Pdf::FORMAT_A4,
            // portrait orientation
            'orientation' => Pdf::ORIENT_PORTRAIT,
            // stream to browser inline
            'destination' => pdf::DEST_BROWSER,
            // your html content input
            'content' => $content,
            // format content from your own css file if needed or use the
            // enhanced bootstrap css built by Krajee for mPDF formatting
            'cssFile' => '@vendor/kartik-v/yii2-mpdf/assets/kv-mpdf-bootstrap.min.css',
//            'marginLeft'=>0,
//            'marginRight'=>0,
            // any css to be embedded if required
            'cssInline' => 'body {font-size:10px}',
            'filename'=>Inflector::slug($type.'-'.$model['fullnumber']).'.pdf',
            // set mPDF properties on the fly
//            'options' => ['title' => 'Krajee Report Title'],
            // call mPDF methods on the fly
//            'methods' => [
//                'SetHeader'=>['Krajee Report Header'],
//                'SetFooter'=>['{PAGENO}'],
//            ]
        ]);

        return $pdf;
    }

    public static function paymentDatePeriodList()
    {
        return [
            0=>0,
            7=>7,
            14=>14,
            30=>30,
            60=>60,
            90=>90,

        ];
    }

    public function loadPaymentDatePeriod()
    {
        $date1 = \DateTime::createFromFormat('Y-m-d', $this->date);
        $date2 = \DateTime::createFromFormat('Y-m-d', $this->paymentdate);
        if ($date1 != false && $date2 != false)
        {
            $diff = $date2->diff($date1);
            $this->paymentDatePeriod = $diff->days;
        }

    }

    public static function getParentList()
    {
        $models = static::find()
            ->where(['not in', 'type', [self::TYPE_CORRECTION_ITEMS, self::TYPE_CORRECTION_DATA]])
            ->andWhere([
                'parent_id'=>null,
            ])
            ->all();
            $arr = ArrayHelper::map($models, 'id', 'fullnumber');
            $arr[''] = Yii::t('app', 'Brak');
            ksort($arr);
            return $arr;
    }

    public function storeData()
    {
        $this->data = null;
        $settings = Yii::$app->settings;
        $model = $this;
        $data =[];
        $data = [
            'seller'=> [
                'logo' => $settings->get('companyLogo', 'main'),
                'name' => $settings->get('companyName', 'main'),
                'address' => $settings->get('companyAddress', 'main'),
                'zip' => $settings->get('companyZip', 'main'),
                'city' => $settings->get('companyCity', 'main'),
                'nip' => $settings->get('companyNIP', 'main'),
                'bankName' => ArrayHelper::getValue($this->attributes, 'bank_name', $settings->get('companyBankName', 'main')),
                'bankNumber' => ArrayHelper::getValue($this->attributes, 'bank_account', $settings->get('companyBankNumber', 'main')),

            ],

        ];
        if ($model->customer !== null)
        {
            $customer = $model->customer;
            $data['buyer'] = [
                'logo' => $customer->logo,
                'name' => $customer->name,
                'address' => $customer->address,
                'zip' => $customer->zip,
                'nip' => $customer->nip,
                'city'=>$customer->city,
                'bankNumber' => $customer->bank_account,
            ];
        }
        else
        {
            $data['buyer'] = [
                'logo' => '',
                'name' => '',
                'address' => '',
                'nip' => '',
                'city'=>'',
                'bankNumber' => '',
            ];
        }

        $data['invoiceContents'] = $model->getInvoiceContents()->asArray()->all();

        $data['invoiceAttachments'] = $model->getInvoiceAttachments()->asArray()->all();
        $data['paymentHistory'] = $model->getPaymentHistoryData();

        $relations = ['creator'];
        if ($this->owner_id != null)
        {
        	$relations[] = 'owner';
        }
        $m = static::find()
            ->joinWith(['creator'])
            ->asArray()
            ->where(['invoice.id'=>$this->id])->one();

        $data['model'] = $m;
        $data['owner'] = $this->owner;
        $data['labels'] = [
            'paymentMethod'=>$this->getPaymentmethodLabel(),
            'creator'=>$this->creator->getDisplayLabel(),
	        'ownerType'=>$this->getOwnerTypeLabel(),
	        'ownerLabel'=>$this->getOwnerDisplayLabel(),
        ];

        $this->data = serialize($data);
        $this->updateAttributes(['data']);

    }

    public function loadData()
    {
        if ($this->data == null)
        {
            $this->storeData();
        }
        $data = unserialize($this->data);
        return $data;
    }

    public function getPaymentHistoryData()
    {
        $data = [];
        $payments = $this->getInvoicePaymentHistories()
            ->orderBy(['id'=>SORT_DESC])
            ->all();
        foreach ($payments as $payment)
        {
            $data[] = [
                'id'=> $payment->id,
                'label' => $payment->creator->displayLabel,
                'amount'=>$payment->amount,
                'date'=>$payment->date,
                'payment_method'=>$payment->payment_method
            ];
        }

        return $data;
    }

    public static function getOwnerMap()
    {
	    $map =[
		    static::OWNER_TYPE_EVENT=>Event::className(),
		    static::OWNER_TYPE_RENT=>Rent::className(),
	    ];
	    return $map;
    }

    public function getOwner()
    {
	    if ($this->owner_type == null)
	    {
	    	return null;
	    }
	    else {
	    	$className = ArrayHelper::getValue(static::getOwnerMap(), $this->owner_type);
	    	return $this->hasOne($className, ['id'=>'owner_id']);
	    }
    }

    public static function getOwnerTypeList()
    {
    	$list = [
    		static::OWNER_TYPE_NONE => Yii::t('app', '-'),
		    static::OWNER_TYPE_EVENT => Yii::t('app', 'Wydarzenie'),
		    static::OWNER_TYPE_RENT => Yii::t('app', 'Wypożyczenie'),
	    ];
    	return $list;
    }

	public static function getOwnerPrefixList()
	{
		$map =[
			static::OWNER_TYPE_EVENT=>'e',
			static::OWNER_TYPE_RENT=>'r',
		];
		return $map;
	}


    public static function getOwnerList($type)
    {
    	if ($type==null)
	    {
	    	return [];
	    }

	    $className = ArrayHelper::getValue(static::getOwnerMap(), $type);
    	$models = $className::find()->all();
    	$list = ArrayHelper::map($models, 'id', 'displayLabel');
    	return $list;
    }



	public static function getOwnerCodeList()
	{
		$list = [];
		$typeList = static::getOwnerTypeList();
		$prefixList = static::getOwnerPrefixList();
		foreach (static::getOwnerMap() as $type => $class)
		{
			$label = ArrayHelper::getValue($typeList, $type);
			$prefix = $type;
			foreach ($class::getList() as $id=>$item)
			{
				$list[$label][$prefix.'_'.$id] = $item;
			}
		}

		return $list;
	}

    public function getOwnerDisplayLabel()
    {
    	if ($this->owner!==null)
	    {
	    	return $this->owner->displayLabel;
	    }
	    return null;
    }

    public static function getControllerId($type)
    {
    	$class = ArrayHelper::getValue(static::getOwnerMap(), $type);
	    $controller = Inflector::camel2id(Inflector::getClassName($class));
	    return $controller;
    }

    public function getOwnerTypeLabel()
    {
    	return ArrayHelper::getValue(static::getOwnerTypeList(), $this->owner_type);
    }
}
