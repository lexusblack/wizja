<?php

namespace common\models;

use Yii;
use \common\models\base\EventUserWorkingTime as BaseEventUserWorkingTime;
use yii\db\Query;

/**
 * This is the model class for table "event_user_working_time".
 */
class EventUserWorkingTime extends BaseEventUserWorkingTime
{
    public $dateRange;
    public $roleIds;

    public function behaviors()
    {
        $behaviors = [
            'link' => [
                'class' => \common\behaviors\LinkBehavior::className(),
                'attributes' => [
                    'roleIds',
                ],
                'relations' => [
                    'roles',
                ],
                'modelClasses'=>[
                    'common\models\UserEventRole',
                ],
                'connectionClasses'=> [
                    'common\models\EventWorkingTimeRole',
                ],
            ],



        ];
        return array_merge(parent::behaviors(), $behaviors);
    }

    public function rules()
    {
        $rules = [
            [['roleIds'], 'each', 'rule'=>['integer']],
            [['start_time'], 'validateTimes'],
        ];
        return array_merge(parent::rules(), $rules);
    }


    public function beforeValidate()
    {
        $this->roleIds = [$this->roleIds];
        if ($this->user_id === null)
        {
            $this->user_id = Yii::$app->user->id;
        }
        return parent::beforeValidate();
    }

    public function beforeSave($insert)
    {
        $this->duration = strtotime($this->end_time) - strtotime($this->start_time);
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes);
        if ($insert){
            if ($this->task_id)
                $this->task->updateExpense();
            if ($this->event->type!=1){
                $this->event->updateParentExpense();
                Note::createNote(2, 'eventWorkingHours', $this->event, $this->event_id);
            }
        }
        else{
            Note::createNote(2, 'eventWorkingHoursChange', $this->event, $this->event_id);
            if ($this->task_id)
                $this->task->updateExpense();
            if ($this->event->type!=1)
                $this->event->updateParentExpense();
            if ($changedAttributes['task_id'])
            {
                if ($changedAttributes['task_id']!=$this->task_id)
                {
                    $task = Task::findOne($changedAttributes['task_id']);
                    $task->updateExpense();
                }
            }
        }
        $start_year = substr($this->start_time, 0, 4);
        $end_year = substr($this->end_time, 0, 4);
        $start_month = substr($this->start_time,5,2);
        $end_month = substr($this->end_time,5,2);
        if ($end_month[0]=="0")
            $end_month = $end_month[1];
        if ($start_month[0]=="0")
            $start_month = $start_month[1];
        SettlementUser::store($this->user, $this->event, $start_year, $start_month );
        if ($start_month!=$end_month)
        {
            SettlementUser::store($this->user, $this->event, $end_year, $end_month );
        }
    }

    public function beforeDelete()
    {
        Note::createNote(2, 'eventWorkingHoursDelete', $this->event, $this->event_id);
        return true;
    }

        public function afterDelete()
    {
        parent::afterDelete();
        if ($this->event !== null)
        {
            if ($this->event->type!=1)
            {
                $this->event->updateParentExpense();
            }
                    $start_year = substr($this->start_time, 0, 4);
                    $end_year = substr($this->end_time, 0, 4);
                    $start_month = substr($this->start_time,5,2);
                    $end_month = substr($this->end_time,5,2);
                    if ($end_month[0]=="0")
                        $end_month = $end_month[1];
                    if ($start_month[0]=="0")
                        $start_month = $start_month[1];
                    SettlementUser::store($this->user, $this->event, $start_year, $start_month );
                    if ($start_month!=$end_month)
                    {
                        SettlementUser::store($this->user, $this->event, $end_year, $end_month );
                    }
        }
    }

    public function getSalary()
    {
        $salary = 0;
        $user = $this->user;
        $rate = $user->rate_amount;
        $type = $user->rate_type;

        if ($type > 0)
        {
            $duration = $this->duration;
            $salary = (floor($duration / ($type * 3600))) * $rate;
        }

        return $salary;
    }

    public function attributeLabels()
    {
        $labels = [
            'roleIds'=>Yii::t('app', 'Role'),
        ];
        return array_merge(parent::attributeLabels(), $labels);
    }

    public function getMonth($user_id, $event_id, $month=null, $year=null)
    {
        $works = EventUserWorkingTime::find()->where(['event_id'=>$event_id, 'user_id'=>$user_id])->all();
        $firstDayUTS = mktime (0, 0, 0, $month, 1, $year);

        $firstDay = date("Y-m-d H:i:s", $firstDayUTS);
        $lastDay = date("Y-m-t", strtotime($firstDay));
        $lastDay .=" 23:59:59";
        $workings = [];
        foreach ($works as $work)
        {
            if ($year)
            {
                if ($work->start_time<$firstDay)
                    if ($work->end_time>$firstDay){
                        $work->start_time = $firstDay;
                        $work->duration = strtotime($work->end_time) - strtotime($work->start_time);
                    }
                if ($work->end_time>$lastDay)
                    if ($work->start_time<$lastDay){
                        $work->end_time = $lastDay;
                        $work->duration = strtotime($work->end_time) - strtotime($work->start_time)+1;
                    }
                if (($work->start_time>=$firstDay)&&($work->end_time<=$lastDay))
                    $workings[] = $work;
            }else{
                $workings[] = $work;
            }


        }
        return $workings;
    }

    public function validateTimes($attribute, $params, $validator)
    {
// już mogą czasy pracy na siebie nachodzić 11.10.2017 r.

//        $count = Yii::$app->db->createCommand('SELECT
//	COUNT(*)
//FROM
//	event_user_working_time t1
//
//WHERE (
//	(
//		(`start_time` < :start)
//		AND(`end_time` > :start)
//	)
//OR(
//	(`start_time` < :end)
//	AND(`end_time` > :end)
//)
//OR(
//	(`start_time` > :start)
//	AND(`end_time` < :start)
//)
//) and user_id=:userId', [
//        ':start'=>$this->start_time,
//            ':end'=>$this->end_time,
//            ':userId'=>$this->user_id,
//        ])
//        ->queryScalar();
//        if ($count > 0)
//        {
//            $validator->addError($this, $attribute, Yii::t('app', 'Czasy pracy nie mogą na siebie nachodzić.'));
//            $validator->addError($this, 'dateRange', Yii::t('app', 'Czasy pracy nie mogą na siebie nachodzić.'));
//        }

    }
}
