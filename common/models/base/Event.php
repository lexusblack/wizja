<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace common\models\base;
use common\helpers\ArrayHelper;

use Yii;
use yii\behaviors\BlameableBehavior;

/**
 * This is the base-model class for table "event".
 *
 * @property integer $id
 * @property string $name
 * @property integer $location_id
 * @property integer $customer_id
 * @property integer $contact_id
 * @property integer $manager_id
 * @property string $info
 * @property string $description
 * @property string $code
 * @property string $event_start
 * @property string $event_end
 * @property integer $status
 * @property integer $type
 * @property string $create_time
 * @property string $update_time
 * @property string $packing_start
 * @property string $packing_end
 * @property string $montage_start
 * @property string $montage_end
 * @property string $readiness_start
 * @property string $readiness_end
 * @property string $practice_start
 * @property string $practice_end
 * @property string $disassembly_start
 * @property string $disassembly_end
 * @property integer $packing_type
 * @property integer $montage_type
 * @property integer $readiness_type
 * @property integer $practice_type
 * @property integer $disassembly_type
 * @property integer $level
 * @property string $route_start
 * @property string $route_end
 * @property string $provision
 * @property integer $offer_prepared
 * @property integer $offer_sent
 * @property string $offer_sent_date
 * @property integer $offer_sent_user_id
 * @property integer $offer_accepted
 * @property integer $ready_to_invoice
 * @property string $ready_to_invoice_date
 * @property integer $ready_to_invoice_user_id
 * @property integer $invoice_issued
 * @property integer $invoice_sent
 * @property integer $expense_entered
 * @property string $expense_entered_date
 * @property integer $expense_entered_user_id
 * @property integer $invoice_status
 * @property integer $expense_status
 * @property integer $project_settled
 * @property integer $project_paid
 * @property integer $expenses_paid
 * @property integer $project_done
 * @property integer $transfer_booked
 * @property string $invoice_number
 * @property integer $provision_type
 * @property string $finance_info
 * @property integer $invoice_id
 * @property integer $creator_id
 * @property integer $crew_working_time_changed
 *
 * @property \common\models\Attachment[] $attachments
 * @property \common\models\Customer $customer
 * @property \common\models\Location $location
 * @property \common\models\Contact $contact
 * @property \common\models\User $manager
 * @property \common\models\User $creator
 * @property \common\models\Invoice $invoice
 * @property \common\models\User $expenseEnteredUser
 * @property \common\models\User $readyToInvoiceUser
 * @property \common\models\User $offerSentUser
 * @property \common\models\EventBreaks[] $eventBreaks
 * @property \common\models\EventDepartment[] $eventDepartments
 * @property \common\models\Department[] $departments
 * @property \common\models\EventExpense[] $eventExpenses
 * @property \common\models\EventGearItem[] $eventGearItems
 * @property \common\models\GearItem[] $gearItems
 * @property \common\models\EventInvoice[] $eventInvoices
 * @property \common\models\EventMessage[] $eventMessages
 * @property \common\models\EventOuterGear[] $eventOuterGears
 * @property \common\models\OuterGear[] $outerGears
 * @property \common\models\EventUser[] $eventUsers
 * @property \common\models\User[] $users
 * @property \common\models\User[] $savedUsers
 * @property \common\models\EventUserAddon[] $eventUserAddons
 * @property \common\models\EventUserAllowance[] $eventUserAllowances
 * @property \common\models\EventUserPlannedBreaks[] $eventUserPlannedBreaks
 * @property \common\models\EventUserPlannedWrokingTime[] $eventUserPlannedWrokingTimes
 * @property \common\models\EventUserWorkingTime[] $eventUserWorkingTimes
 * @property \common\models\EventVehicle[] $eventVehicles
 * @property \common\models\Vehicle[] $vehicles
 * @property \common\models\EventVehicleWorkingHours[] $eventVehicleWorkingHours
 * @property \common\models\ExpenseEvent[] $expenseEvents
 * @property \common\models\Expense[] $expenses
 * @property \common\models\IncomesForEvent[] $incomesForEvents
 * @property \common\models\Offer[] $offers
 * @property \common\models\OutcomesForEvent[] $outcomesForEvents
 * @property \common\models\PlanboardUserEventRoleOrder[] $planboardUserEventRoleOrders
 * @property \common\models\PlanboardUserEventRoleUsersOrder[] $planboardUserEventRoleUsersOrders
 * @property \common\models\PlanboardUserGeneralEventOrder[] $planboardUserGeneralEventOrders
 * @property \common\models\PlanboardUserOrder[] $planboardUserOrders
 * @property \common\models\PlanboardVehicleOrder[] $planboardVehicleOrders
 * @property \common\models\SettlementUser[] $settlementUsers
 * @property \common\models\SavedEventUsers $savedEventUsers
 * @property \common\models\SavedUserWorkingTime $savedUserWorkingTime
 * @property string $aliasModel
 */
abstract class Event extends \common\components\BaseActiveRecord
{



    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'event';
    }


    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            [
                'class' => BlameableBehavior::className(),
                'createdByAttribute' => 'creator_id',
                'updatedByAttribute' => false,
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {

        return [
            [['name', 'customer_id'], 'required'],
            [['location_id', 'customer_id', 'contact_id', 'manager_id', 'status', 'type', 'packing_type', 'montage_type', 'readiness_type', 'practice_type', 'disassembly_type', 'level', 'offer_prepared', 'offer_sent', 'offer_sent_user_id', 'offer_accepted', 'ready_to_invoice', 'ready_to_invoice_user_id', 'invoice_issued', 'invoice_sent', 'expense_entered', 'expense_entered_user_id', 'invoice_status', 'expense_status', 'project_settled', 'project_paid', 'expenses_paid', 'project_done', 'transfer_booked', 'provision_type', 'invoice_id', 'tasks_schema_id', 'send_reminders', 'event_type', 'scenography_level'], 'integer'],
            [['info', 'description', 'finance_info', 'address', 'details'], 'string'],
            [['event_start', 'event_end', 'create_time', 'update_time', 'packing_start', 'packing_end', 'montage_start', 'montage_end', 'readiness_start', 'readiness_end', 'practice_start', 'practice_end', 'disassembly_start', 'disassembly_end', 'offer_sent_date', 'ready_to_invoice_date', 'expense_entered_date', 'paying_date'], 'safe'],
            [['provision', 'crew_working_time_changed'], 'number'],
            [['name', 'code', 'route_start', 'route_end', 'invoice_number'], 'string', 'max' => 255],
            [['code'], 'unique'],
            [['customer_id'], 'exist', 'skipOnError' => true, 'targetClass' => Customer::className(), 'targetAttribute' => ['customer_id' => 'id']],
            [['location_id'], 'exist', 'skipOnError' => true, 'targetClass' => Location::className(), 'targetAttribute' => ['location_id' => 'id']],
            [['contact_id'], 'exist', 'skipOnError' => true, 'targetClass' => Contact::className(), 'targetAttribute' => ['contact_id' => 'id']],
            [['manager_id'], 'exist', 'skipOnError' => true, 'targetClass' => User::className(), 'targetAttribute' => ['manager_id' => 'id']],
            [['creator_id'], 'exist', 'skipOnError' => true, 'targetClass' => User::className(), 'targetAttribute' => ['creator_id' => 'id']],
            [['invoice_id'], 'exist', 'skipOnError' => true, 'targetClass' => Invoice::className(), 'targetAttribute' => ['invoice_id' => 'id']],
            [['expense_entered_user_id'], 'exist', 'skipOnError' => true, 'targetClass' => User::className(), 'targetAttribute' => ['expense_entered_user_id' => 'id']],
            [['ready_to_invoice_user_id'], 'exist', 'skipOnError' => true, 'targetClass' => User::className(), 'targetAttribute' => ['ready_to_invoice_user_id' => 'id']],
            [['offer_sent_user_id'], 'exist', 'skipOnError' => true, 'targetClass' => User::className(), 'targetAttribute' => ['offer_sent_user_id' => 'id']]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app', 'ID'),
            'name' => Yii::t('app', 'Nazwa'),
            'location_id' => Yii::t('app', 'Miejsce'),
            'customer_id' => Yii::t('app', 'Klient'),
            'contact_id' => Yii::t('app', 'Osoba kontaktowa'),
            'manager_id' => Yii::t('app', 'Project Manager'),
            'info' => Yii::t('app', 'Uwagi'),
            'description' => Yii::t('app', 'Opis'),
            'code' => Yii::t('app', 'ID imprezy'),
            'event_start' => Yii::t('app', 'Impreza od'),
            'event_end' => Yii::t('app', 'Impreza do'),
            'status' => Yii::t('app', 'Status'),
            'type' => Yii::t('app', 'Typ'),
            'create_time' => Yii::t('app', 'Dodano'),
            'update_time' => Yii::t('app', 'Edytowano'),
            'packing_start' => Yii::t('app', 'Pakowanie od'),
            'packing_end' => Yii::t('app', 'Pakowanie do'),
            'montage_start' => Yii::t('app', 'Montaż od'),
            'montage_end' => Yii::t('app', 'Montaż do'),
            'readiness_start' => Yii::t('app', 'Gotowość od'),
            'readiness_end' => Yii::t('app', 'Gotowość do'),
            'practice_start' => Yii::t('app', 'Próby od'),
            'practice_end' => Yii::t('app', 'Próby do'),
            'disassembly_start' => Yii::t('app', 'Demontaż od'),
            'disassembly_end' => Yii::t('app', 'Demontaż do'),
            'packing_type' => Yii::t('app', 'Typ pakowania'),
            'montage_type' => Yii::t('app', 'Typ montażu'),
            'readiness_type' => Yii::t('app', 'Typ gotowości'),
            'practice_type' => Yii::t('app', 'Typ prób'),
            'disassembly_type' => Yii::t('app', 'Typ demontażu'),
            'level' => Yii::t('app', 'Poziom'),
            'route_start' => Yii::t('app', 'Dojazd z'),
            'route_end' => Yii::t('app', 'Dojazd do'),
            'provision' => Yii::t('app', 'Procent'),
            'offer_prepared' => Yii::t('app', 'Oferta sporządzona'),
            'offer_sent' => Yii::t('app', 'Oferta wysłana'),
            'offer_sent_date' => Yii::t('app', 'Data'),
            'offer_sent_user_id' => Yii::t('app', 'Użytkownik'),
            'offer_accepted' => Yii::t('app', 'Oferta zaakceptowana'),
            'ready_to_invoice' => Yii::t('app', 'Gotowy do zafakturowania'),
            'ready_to_invoice_date' => Yii::t('app', 'Data'),
            'ready_to_invoice_user_id' => Yii::t('app', 'Użytkownik'),
            'invoice_issued' => Yii::t('app', 'Faktura wystawiona'),
            'invoice_sent' => Yii::t('app', 'Faktura wysłana'),
            'expense_entered' => Yii::t('app', 'Koszty wpisane'),
            'expense_entered_date' => Yii::t('app', 'Data'),
            'expense_entered_user_id' => Yii::t('app', 'Użytkownik'),
            'invoice_status' => Yii::t('app', 'Faktury'),
            'expense_status' => Yii::t('app', 'Faktury kosztowe powiązane'),
            'project_settled' => Yii::t('app', 'Projekt rozliczony'),
            'project_paid' => Yii::t('app', 'Projekt opłacony'),
            'expenses_paid' => Yii::t('app', 'Koszty opłacone'),
            'project_done' => Yii::t('app', 'Projekt zakończony'),
            'transfer_booked' => Yii::t('app', 'Przelew zaksięgowany'),
            'invoice_number' => Yii::t('app', 'Numer faktury'),
            'creator_id' => Yii::t('app', 'Utworzył'),
            'provision_type' => Yii::t('app', 'Typ prowizji'),
            'finance_info' => Yii::t('app', 'Notatki'),
            'invoice_id' => Yii::t('app', 'Faktura'),
            'crew_working_time_changed' => Yii::t('app', 'Czas pracy załogi został zmieniony'),
            'address' => Yii::t('app', 'Miejsce imprezy ręcznie'),
            'send_reminders'=>Yii::t('app', 'Automatyczne wysyłanie powiadomień do ekipy'),
            'event_type'=>Yii::t('app', 'Rodzaj'),
            'details'=>Yii::t('app', 'Szczegóły'),
            'paying_date'=>Yii::t('app', 'Data księgowania')
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getAttachments()
    {
        return $this->hasMany(\common\models\Attachment::className(), ['event_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCustomerNotes()
    {
        return $this->hasMany(\common\models\CustomerNote::className(), ['event_id' => 'id']);
    }
    /**
     * @return \yii\db\ActiveQuery
     */
    public function getTasks()
    {
        return $this->hasMany(\common\models\Task::className(), ['event_id' => 'id']);
    }

    public function getLogs()
    {
        return $this->hasMany(\common\models\EventLog::className(), ['event_id' => 'id'])->orderBy(['create_time' => SORT_ASC]);
    }
    /**
     * @return \yii\db\ActiveQuery
     */
    public function getProject()
    {
        return $this->hasOne(\common\models\Project::className(), ['id' => 'project_id']);
    }    /**
     * @return \yii\db\ActiveQuery
     */
    public function getEventModel()
    {
        return $this->hasOne(\common\models\EventModel::className(), ['id' => 'type']);
    }
    /**
     * @return \yii\db\ActiveQuery
     */
    public function getEventStatut()
    {
        return $this->hasOne(\common\models\EventStatut::className(), ['id' => 'status']);
    }
    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCustomer()
    {
        return $this->hasOne(\common\models\Customer::className(), ['id' => 'customer_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getLocation()
    {
        return $this->hasOne(\common\models\Location::className(), ['id' => 'location_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getContact()
    {
        return $this->hasOne(\common\models\Contact::className(), ['id' => 'contact_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getManager()
    {
        return $this->hasOne(\common\models\User::className(), ['id' => 'manager_id']);
    }



    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCreator()
    {
        return $this->hasOne(\common\models\User::className(), ['id' => 'creator_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getInvoice()
    {
        return $this->hasOne(\common\models\Invoice::className(), ['id' => 'invoice_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getExpenseEnteredUser()
    {
        return $this->hasOne(\common\models\User::className(), ['id' => 'expense_entered_user_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getReadyToInvoiceUser()
    {
        return $this->hasOne(\common\models\User::className(), ['id' => 'ready_to_invoice_user_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getOfferSentUser()
    {
        return $this->hasOne(\common\models\User::className(), ['id' => 'offer_sent_user_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getEventBreaks()
    {
        return $this->hasMany(\common\models\EventBreaks::className(), ['event_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getTaskCategories()
    {
        return $this->hasMany(\common\models\TaskCategory::className(), ['event_id' => 'id'])->orderBy(['order'=>SORT_ASC]);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPacklists()
    {
        return $this->hasMany(\common\models\Packlist::className(), ['event_id' => 'id']);
    }
    /**
     * @return \yii\db\ActiveQuery
     */
    public function getEventDepartments()
    {
        return $this->hasMany(\common\models\EventDepartment::className(), ['event_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getDepartments()
    {
        return $this->hasMany(\common\models\Department::className(), ['id' => 'department_id'])->viaTable('event_department', ['event_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getRequests()
    {
        $ids = ArrayHelper::map(EventRequest::find()->where(['event_id'=>$this->id])->asArray()->all(), 'request_id', 'request_id');
        return Request::find()->where(['id' => $ids])->all();
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getEventExpenses()
    {
        return $this->hasMany(\common\models\EventExpense::className(), ['event_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getEventGearItems()
    {
        return $this->hasMany(\common\models\EventGearItem::className(), ['event_id' => 'id']);
    }

    public function getEventExtraItems()
    {
        return $this->hasMany(\common\models\EventExtraItem::className(), ['event_id' => 'id'])->orderBy(['gear_category_id'=>SORT_ASC]);
    }
    /**
     * @return \yii\db\ActiveQuery
     */
    public function getEventGears()
    {
        return $this->hasMany(\common\models\EventGear::className(), ['event_id' => 'id']);
    }    /**
     * @return \yii\db\ActiveQuery
     */
    public function getEventSchedules()
    {
        return $this->hasMany(\common\models\EventSchedule::className(), ['event_id' => 'id'])->orderBy(['position'=>SORT_ASC]);
    }
    /**
     * @return \yii\db\ActiveQuery
     */
    public function getGearItems()
    {
        return $this->hasMany(\common\models\GearItem::className(), ['id' => 'gear_item_id'])->viaTable('event_gear_item', ['event_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getEventInvoices()
    {
        return $this->hasMany(\common\models\EventInvoice::className(), ['event_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getEventMessages()
    {
        return $this->hasMany(\common\models\EventMessage::className(), ['event_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getEventOuterGears()
    {
        return $this->hasMany(\common\models\EventOuterGear::className(), ['event_id' => 'id']);
    }
    /**
     * @return \yii\db\ActiveQuery
     */
    public function getEventOuterGearModels()
    {
        return $this->hasMany(\common\models\EventOuterGearModel::className(), ['event_id' => 'id']);
    }
    /**
     * @return \yii\db\ActiveQuery
     */
    public function getOuterGears()
    {
        return $this->hasMany(\common\models\OuterGear::className(), ['id' => 'outer_gear_id'])->viaTable('event_outer_gear', ['event_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getOuterGearModels()
    {
        return $this->hasMany(\common\models\OuterGearModel::className(), ['id' => 'outer_gear_model_id'])->viaTable('event_outer_gear_model', ['event_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getEventUsers()
    {
        return $this->hasMany(\common\models\EventUser::className(), ['event_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUsers()
    {
        return $this->hasMany(\common\models\User::className(), ['id' => 'user_id'])->viaTable('event_user', ['event_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getEventUserAddons()
    {
        return $this->hasMany(\common\models\EventUserAddon::className(), ['event_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getEventUserAllowances()
    {
        return $this->hasMany(\common\models\EventUserAllowance::className(), ['event_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getEventUserPlannedBreaks()
    {
        return $this->hasMany(\common\models\EventUserPlannedBreaks::className(), ['event_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getEventUserPlannedWrokingTimes()
    {
        return $this->hasMany(\common\models\EventUserPlannedWrokingTime::className(), ['event_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getEventUserWorkingTimes()
    {
        return $this->hasMany(\common\models\EventUserWorkingTime::className(), ['event_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getEventVehicles()
    {
        return $this->hasMany(\common\models\EventVehicle::className(), ['event_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getVehicles()
    {
        return $this->hasMany(\common\models\Vehicle::className(), ['id' => 'vehicle_id'])->viaTable('event_vehicle', ['event_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getEventVehicleWorkingHours()
    {
        return $this->hasMany(\common\models\EventVehicleWorkingHours::className(), ['event_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getExpenseEvents()
    {
        return $this->hasMany(\common\models\ExpenseEvent::className(), ['event_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getExpenses()
    {
        return $this->hasMany(\common\models\Expense::className(), ['id' => 'expense_id'])->viaTable('expense_event', ['event_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getIncomesForEvents()
    {
        return $this->hasMany(\common\models\IncomesForEvent::className(), ['event_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getOffers()
    {
        return $this->hasMany(\common\models\Offer::className(), ['event_id' => 'id']);
    }

    public function getAgencyOffers()
    {
        return $this->hasMany(\common\models\AgencyOffer::className(), ['event_id' => 'id']);
    }
    /**
     * @return \yii\db\ActiveQuery
     */
    public function getOutcomesForEvents()
    {
        return $this->hasMany(\common\models\OutcomesForEvent::className(), ['event_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPlanboardUserEventRoleOrders()
    {
        return $this->hasMany(\common\models\PlanboardUserEventRoleOrder::className(), ['event_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPlanboardUserEventRoleUsersOrders()
    {
        return $this->hasMany(\common\models\PlanboardUserEventRoleUsersOrder::className(), ['event_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPlanboardUserGeneralEventOrders()
    {
        return $this->hasMany(\common\models\PlanboardUserGeneralEventOrder::className(), ['event_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPlanboardUserOrders()
    {
        return $this->hasMany(\common\models\PlanboardUserOrder::className(), ['event_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPlanboardVehicleOrders()
    {
        return $this->hasMany(\common\models\PlanboardVehicleOrder::className(), ['event_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getSettlementUsers()
    {
        return $this->hasMany(\common\models\SettlementUser::className(), ['event_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getSavedEventUsers()
    {
        return $this->hasMany(\common\models\SavedEventUsers::className(), ['event_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getSavedUserWorkingTimes()
    {
        return $this->hasMany(\common\models\SavedUserWorkingTime::className(), ['event_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getSavedUsers()
    {
        return $this->hasMany(\common\models\User::className(), ['id' => 'user_id'])->viaTable('saved_event_users', ['event_id' => 'id']);
    }

    public function getDeals()
    {
        return $this->hasMany(\common\models\Deal::className(), ['event_id' => 'id']);
    }

    public function getEstimates()
    {
        return $this->hasMany(\common\models\Estimate::className(), ['event_id' => 'id']);
    }

    public function getBriefs()
    {
        return $this->hasMany(\common\models\Brief::className(), ['event_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getNotes()
    {
        return $this->hasMany(\common\models\Note::className(), ['event_id' => 'id'])->andWhere(['type'=>2])->orderBy(['datetime'=>SORT_DESC]);
    }

    public function fields()
    {
        $fields = parent::fields();

        if ($this->isNewRecord) {
            return $fields;
        }
        $fields['location'] = function() {
            $location = null;
            /*
            foreach ($this->bundles as $bundle) {
                $bundles[] = $bundle->toArray();
            }
            */
            if ($this->location)
                $location = $this->location->toArray();
            return $location;
        };
        $fields['customer'] = function() {
            $customer = null;
            /*
            foreach ($this->bundles as $bundle) {
                $bundles[] = $bundle->toArray();
            }
            */
            if ($this->customer)
                $customer = $this->customer->toArray();
            return $customer;
        };
        $fields['contact'] = function() {
            $contact = null;
            /*
            foreach ($this->bundles as $bundle) {
                $bundles[] = $bundle->toArray();
            }
            */
            if ($this->contact)
                $contact = $this->contact->toArray();
            return $contact;
        };
        $fields['manager'] = function() {
            $manager = null;
            /*
            foreach ($this->bundles as $bundle) {
                $bundles[] = $bundle->toArray();
            }
            */
            if ($this->manager)
                $manager = $this->manager->toArray();
            return $manager;
        };
        return $fields;
    }

}
