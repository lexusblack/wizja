<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace common\models\base;

use Yii;
use yii\behaviors\TimestampBehavior;
use yii\behaviors\BlameableBehavior;

/**
 * This is the base-model class for table "meeting".
 *
 * @property integer $id
 * @property string $name
 * @property string $start_time
 * @property string $end_time
 * @property integer $customer_id
 * @property integer $contact_id
 * @property string $description
 * @property integer $status
 * @property integer $type
 * @property string $create_time
 * @property string $update_time
 * @property string $location
 * @property integer $reminder
 * @property integer $remind_sms
 * @property integer $remind_email
 * @property integer $remind_push
 * @property integer $remind_all
 * @property integer $remind_owner
 * @property integer $remind_company
 * @property integer $created_by
 * @property integer $active
 *
 * @property \common\models\Customer $customer
 * @property \common\models\Contact $contact
 * @property \common\models\User $createdBy
 * @property \common\models\MeetingUser[] $meetingUsers
 * @property \common\models\User[] $users
 * @property \common\models\NotificationSms[] $notificationSmses
 * @property \common\models\NotificationMail[] $notificationMails
 * @property string $aliasModel
 */
abstract class Meeting extends \common\components\BaseActiveRecord
{



    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'meeting';
    }


    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['name', 'start_time', 'end_time'], 'required'],
            [['start_time', 'end_time', 'create_time', 'update_time'], 'safe'],
            [['customer_id', 'contact_id', 'status', 'type', 'reminder', 'remind_sms', 'remind_email', 'remind_push', 'remind_all', 'remind_owner', 'remind_company', 'created_by', 'active'], 'integer'],
            [['description'], 'string'],
            [['name', 'location'], 'string', 'max' => 255],
            [['customer_id'], 'exist', 'skipOnError' => true, 'targetClass' => Customer::className(), 'targetAttribute' => ['customer_id' => 'id']],
            [['contact_id'], 'exist', 'skipOnError' => true, 'targetClass' => Contact::className(), 'targetAttribute' => ['contact_id' => 'id']],
            [['created_by'], 'exist', 'skipOnError' => true, 'targetClass' => User::className(), 'targetAttribute' => ['created_by' => 'id']]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app', 'ID'),
            'name' => Yii::t('app', 'Nazwa'),
            'start_time' => Yii::t('app', 'Od'),
            'end_time' => Yii::t('app', 'Do'),
            'customer_id' => Yii::t('app', 'Klient'),
            'contact_id' => Yii::t('app', 'Osoba kontaktowa'),
            'description' => Yii::t('app', 'Opis'),
            'status' => Yii::t('app', 'Status'),
            'type' => Yii::t('app', 'Typ'),
            'create_time' => Yii::t('app', 'Stworzono'),
            'update_time' => Yii::t('app', 'Zaktualizowano'),
            'location' => Yii::t('app', 'Miejsce'),
            'reminder' => Yii::t('app', 'Przypomnienie'),
            'remind_sms' => Yii::t('app', 'Przypomnienie SMS'),
            'remind_email' => Yii::t('app', 'Przypomnienie email'),
            'remind_push' => Yii::t('app', 'Przypomnienie PUSH'),
            'remind_all' => Yii::t('app', 'Przypomnij wszystkim'),
            'remind_owner' => Yii::t('app', 'Przypomnij mi'),
            'remind_company' => Yii::t('app', 'Przypomnij mojej firmie'),
            'created_by' => Yii::t('app', 'Utworzył'),
            'dateRange' => Yii::t('app', 'Przedział czasowy'),
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCustomer()
    {
        return $this->hasOne(\common\models\Customer::className(), ['id' => 'customer_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getContact()
    {
        return $this->hasOne(\common\models\Contact::className(), ['id' => 'contact_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCreatedBy()
    {
        return $this->hasOne(\common\models\User::className(), ['id' => 'created_by']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getMeetingUsers()
    {
        return $this->hasMany(\common\models\MeetingUser::className(), ['meeting_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUsers()
    {
        return $this->hasMany(\common\models\User::className(), ['id' => 'user_id'])->viaTable('meeting_user', ['meeting_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getNotificationSmses()
    {
        return $this->hasMany(\common\models\NotificationSms::className(), ['id' => 'sms_id'])->viaTable('meeting_sms_reminder', ['meeting_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getNotificationMails()
    {
        return $this->hasMany(\common\models\NotificationMail::className(), ['id' => 'mail_id'])->viaTable('meeting_mail_reminder', ['meeting_id' => 'id']);
    }

/**
     * @inheritdoc
     * @return array mixed
     */ 
    public function behaviors()
    {
        return [
            'blameable' => [
                'class' => BlameableBehavior::className(),
                'createdByAttribute' => 'created_by',
                'updatedByAttribute' => false,
            ],
        ];
    }

    public function fields()
    {
        $fields = parent::fields();

        if ($this->isNewRecord) {
            return $fields;
        }
        $fields['customer'] = function() {
            $customer = null;
            /*
            foreach ($this->bundles as $bundle) {
                $bundles[] = $bundle->toArray();
            }
            */
            if ($this->customer)
                $customer = $this->customer->toArray();
            return $customer;
        };
        $fields['contact'] = function() {
            $contact = null;
            /*
            foreach ($this->bundles as $bundle) {
                $bundles[] = $bundle->toArray();
            }
            */
            if ($this->contact)
                $contact = $this->contact->toArray();
            return $contact;
        };
        $fields['members'] = function() {
            $members = [];
            foreach ($this->users as $user)
            {
                $members[] = ['id'=>$user->id, 'first_name'=>$user->first_name, 'last_name'=>$user->last_name, 'phone'=>$user->phone, 'email'=>$user->email, 'photo'=>$user->photo];
            }

            return $members;
        };
        return $fields;
    }
}
