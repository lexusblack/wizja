<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace common\models\base;

use Yii;
use yii\behaviors\BlameableBehavior;
use common\models\Invoice as InvoiceChild;

/**
 * This is the base-model class for table "invoice".
 *
 * @property integer $id
 * @property integer $external_id
 * @property string $paymentmethod
 * @property string $paymentdate
 * @property string $paymentstate
 * @property string $disposaldate_format
 * @property integer $disposaldate_empty
 * @property string $disposaldate
 * @property string $date
 * @property integer $period
 * @property string $total
 * @property string $total_composed
 * @property string $alreadypaid
 * @property string $alreadypaid_initial
 * @property string $remaining
 * @property integer $number
 * @property integer $day
 * @property integer $month
 * @property integer $year
 * @property string $fullnumber
 * @property integer $semitemplatenumber
 * @property string $type
 * @property string $correction_type
 * @property integer $corrections
 * @property string $currency
 * @property string $currency_exchange
 * @property string $currency_label
 * @property string $currency_date
 * @property string $price_currency_exchange
 * @property string $good_price_group_currency_exchange
 * @property integer $template
 * @property integer $auto_send
 * @property string $description
 * @property string $header
 * @property string $footer
 * @property string $user_name
 * @property string $schema
 * @property integer $schema_bill
 * @property integer $schema_canceled
 * @property string $register_description
 * @property string $netto
 * @property string $tax
 * @property integer $signed
 * @property string $hash
 * @property string $warehouse_type
 * @property integer $notes
 * @property integer $documents
 * @property string $tags
 * @property string $price_type
 * @property string $create_time
 * @property string $update_time
 * @property integer $customer_id
 * @property integer $series_id
 * @property string $payment_date
 * @property string $bank_name
 * @property string $bank_account
 * @property string $language_id
 * @property integer $owner_id
 * @property string $owner_class
 * @property integer $owner_type
 * @property integer $paid
 * @property integer $event_id
 * @property integer $parent_id
 * @property resource $data
 * @property integer $paymentmethod_id
 * @property integer $creator_id
 * @property string $correction_explanation
 *
 * @property \common\models\Event[] $events
 * @property \common\models\Customer $customer
 * @property \common\models\InvoiceSerie $series
 * @property \common\models\Invoice $parent
 * @property \common\models\Invoice[] $invoices
 * @property \common\models\Paymentmethod $paymentmethod0
 * @property \common\models\User $creator
 * @property \common\models\InvoiceAttachment[] $invoiceAttachments
 * @property \common\models\InvoiceContent[] $invoiceContents
 * @property \common\models\InvoicePaymentHistory[] $invoicePaymentHistories
 * @property string $aliasModel
 */
abstract class Invoice extends \common\components\BaseActiveRecord
{



    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'invoice';
    }


    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            [
                'class' => BlameableBehavior::className(),
                'createdByAttribute' => 'creator_id',
                'updatedByAttribute' => false,
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['external_id', 'disposaldate_empty', 'period', 'number', 'day', 'month', 'year', 'semitemplatenumber', 'corrections', 'template', 'auto_send', 'schema_bill', 'schema_canceled', 'signed', 'notes', 'documents', 'customer_id', 'series_id', 'owner_id', 'owner_type', 'paid', 'event_id', 'parent_id', 'paymentmethod_id'], 'integer'],
            [['paymentdate', 'disposaldate', 'date', 'currency_date', 'create_time', 'update_time', 'payment_date'], 'safe'],
            [['total', 'total_composed', 'alreadypaid', 'alreadypaid_initial', 'remaining', 'currency_exchange', 'price_currency_exchange', 'good_price_group_currency_exchange', 'netto', 'tax'], 'number'],
            [['description', 'header', 'footer', 'register_description', 'data', 'correction_explanation'], 'string'],
            [['paymentmethod', 'paymentstate', 'disposaldate_format', 'fullnumber', 'type', 'correction_type', 'currency', 'currency_label', 'user_name', 'schema', 'hash', 'warehouse_type', 'tags', 'price_type', 'bank_name', 'bank_account', 'language_id', 'owner_class'], 'string', 'max' => 255],
            [['customer_id'], 'exist', 'skipOnError' => true, 'targetClass' => Customer::className(), 'targetAttribute' => ['customer_id' => 'id']],
            [['series_id'], 'exist', 'skipOnError' => true, 'targetClass' => InvoiceSerie::className(), 'targetAttribute' => ['series_id' => 'id']],
            [['parent_id'], 'exist', 'skipOnError' => true, 'targetClass' => Invoice::className(), 'targetAttribute' => ['parent_id' => 'id']],
            [['paymentmethod_id'], 'exist', 'skipOnError' => true, 'targetClass' => Paymentmethod::className(), 'targetAttribute' => ['paymentmethod_id' => 'id']],
            [['creator_id'], 'exist', 'skipOnError' => true, 'targetClass' => User::className(), 'targetAttribute' => ['creator_id' => 'id']],
            ['correction_explanation', 'required', 'when' => function($model) {
                return in_array($model->type, [InvoiceChild::TYPE_CORRECTION_DATA, InvoiceChild::TYPE_CORRECTION_ITEMS]);
            }, 'whenClient' => "function () {
                return ($('#invoice-type').val() == ".InvoiceChild::TYPE_CORRECTION_DATA." || $('#invoice-type').val() == ".InvoiceChild::TYPE_CORRECTION_ITEMS.");
            }"],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app', 'ID'),
            'external_id' => Yii::t('app', 'ID zewnętrzne'),
            'paymentmethod' => Yii::t('app', 'Metoda płatności'),
            'paymentdate' => Yii::t('app', 'Termin płatności'),
            'paymentstate' => Yii::t('app', 'Stan płatności'),
            'disposaldate_format' => Yii::t('app', 'Format daty sprzedaży'),
            'disposaldate_empty' => Yii::t('app', 'Pusta data sprzedaży?'),
            'disposaldate' => Yii::t('app', 'Data sprzedaży'),
            'date' => Yii::t('app', 'Data wystawienia'),
            'period' => Yii::t('app', 'Okres'),
            'total' => Yii::t('app', 'Razem'),
            'total_composed' => Yii::t('app', 'Razem (z korektami)'),
            'alreadypaid' => Yii::t('app', 'Zapłacono'),
            'alreadypaid_initial' => Yii::t('app', 'Zapłacono'),
            'remaining' => Yii::t('app', 'Pozostało do zapłaty'),
            'number' => Yii::t('app', 'Numer'),
            'day' => Yii::t('app', 'Dzień'),
            'month' => Yii::t('app', 'Miesiąc'),
            'year' => Yii::t('app', 'Rok'),
            'fullnumber' => Yii::t('app', 'Numer wygenerowany'),
            'semitemplatenumber' => Yii::t('app', 'Częściowo wygenerowany numer'),
            'type' => Yii::t('app', 'Typ dokumentu'),
            'correction_type' => Yii::t('app', 'Typ korekty'),
            'corrections' => Yii::t('app', 'Liczba korekt'),
            'currency' => Yii::t('app', 'Waluta'),
            'currency_exchange' => Yii::t('app', 'Kurs księgowy'),
            'currency_label' => Yii::t('app', 'Numer tabeli NBP kursu księgowego'),
            'currency_date' => Yii::t('app', 'Data opublikowania kursu'),
            'price_currency_exchange' => Yii::t('app', 'Kurs stosowany przy przeliczaniu cen'),
            'good_price_group_currency_exchange' => Yii::t('app', 'Kurs grupy cenowej stosowany przy przeliczaniu cen'),
            'template' => Yii::t('app', 'Identyfikator szablonu wydruku faktury'),
            'auto_send' => Yii::t('app', 'Automatyczna wysyłka faktury na maila kontrahenta'),
            'description' => Yii::t('app', 'Uwagi'),
            'header' => Yii::t('app', 'Nagłówek'),
            'footer' => Yii::t('app', 'Stopka'),
            'user_name' => Yii::t('app', 'Nazwa użytkownika'),
            'schema' => Yii::t('app', 'Schemat'),
            'schema_bill' => Yii::t('app', 'Schemat rachunku'),
            'schema_canceled' => Yii::t('app', 'Schemat anulowany'),
            'register_description' => Yii::t('app', 'Opis rejestracji'),
            'netto' => Yii::t('app', 'Wartość netto'),
            'tax' => Yii::t('app', 'Wartość VAT'),
            'signed' => Yii::t('app', 'Pospisany'),
            'hash' => Yii::t('app', 'Hash'),
            'warehouse_type' => Yii::t('app', 'Typ magazynu'),
            'notes' => Yii::t('app', 'Notatki'),
            'documents' => Yii::t('app', 'Dokumenty'),
            'tags' => Yii::t('app', 'Tagi'),
            'price_type' => Yii::t('app', 'Wystawił'),
            'create_time' => Yii::t('app', 'Stworzono'),
            'update_time' => Yii::t('app', 'Zaktualizowano'),
            'customer_id' => Yii::t('app', 'Kontrahent'),
            'series_id' => Yii::t('app', 'Seria'),
            'payment_date' => Yii::t('app', 'Zapłacono dnia'),
            'bank_name' => Yii::t('app', 'Nazwa banku'),
            'bank_account' => Yii::t('app', 'Rachunek bankowy'),
            'language_id' => Yii::t('app', 'Język'),
            'owner_id' => Yii::t('app', 'ID właściciela'),
            'owner_class' => Yii::t('app', 'Klasa właściciela'),
            'owner_type' => Yii::t('app', 'Typ właściciela'),
            'paid' => Yii::t('app', 'Zapłacono całość'),
            'event_id' => Yii::t('app', 'Wydarzenie'),
            'parent_id' => Yii::t('app', 'Faktura do korekty'),
            'data' => Yii::t('app', 'Data'),
            'paymentmethod_id' => Yii::t('app', 'Metoda płatności'),
            'creator_id' => Yii::t('app', 'ID autora'),
            'correction_explanation' => Yii::t('app', 'Uzasadnienie korekty'),
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getEvents()
    {
        return $this->hasMany(\common\models\Event::className(), ['invoice_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCustomer()
    {
        return $this->hasOne(\common\models\Customer::className(), ['id' => 'customer_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getSeries()
    {
        return $this->hasOne(\common\models\InvoiceSerie::className(), ['id' => 'series_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getParent()
    {
        return $this->hasOne(\common\models\Invoice::className(), ['id' => 'parent_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getInvoices()
    {
        return $this->hasMany(\common\models\Invoice::className(), ['parent_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getPaymentmethod0()
    {
        return $this->hasOne(\common\models\Paymentmethod::className(), ['id' => 'paymentmethod_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCreator()
    {
        return $this->hasOne(\common\models\User::className(), ['id' => 'creator_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getInvoiceAttachments()
    {
        return $this->hasMany(\common\models\InvoiceAttachment::className(), ['invoice_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getInvoiceContents()
    {
        return $this->hasMany(\common\models\InvoiceContent::className(), ['invoice_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getInvoicePaymentHistories()
    {
        return $this->hasMany(\common\models\InvoicePaymentHistory::className(), ['invoice_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getInvoiceSends()
    {
        return $this->hasMany(\common\models\InvoiceSend::className(), ['invoice_id' => 'id']);
    }




}
