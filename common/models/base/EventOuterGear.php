<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace common\models\base;
use yii\behaviors\TimestampBehavior;

use Yii;

/**
 * This is the base-model class for table "event_outer_gear".
 *
 * @property integer $event_id
 * @property integer $outer_gear_id
 * @property integer $quantity
 * @property integer $discount
 * @property string $start_time
 * @property string $end_time
 * @property integer $type
 * @property integer $planned
 *
 * @property \common\models\Event $event
 * @property \common\models\OuterGear $outerGear
 * @property string $aliasModel
 */
abstract class EventOuterGear extends \common\components\BaseActiveRecord
{



    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'event_outer_gear';
    }

    public function behaviors()
    {
        return [
            'timestamp' => [
                'class' => TimestampBehavior::className(),
                'updatedAtAttribute' => 'update_time',
                'value' => new \yii\db\Expression('NOW()'),
            ]
        ];
    }
    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['event_id', 'outer_gear_id'], 'required'],
            [['event_id', 'outer_gear_id', 'quantity', 'discount', 'type', 'planned', 'confirm', 'user_id', 'prod'], 'integer'],
            [['start_time', 'end_time'], 'safe'],
            [['description'], 'string'],
            [['event_id', 'outer_gear_id'], 'unique', 'targetAttribute' => ['event_id', 'outer_gear_id'], 'message' => 'The combination of Event ID and Outer Gear ID has already been taken.'],
            [['event_id'], 'exist', 'skipOnError' => true, 'targetClass' => Event::className(), 'targetAttribute' => ['event_id' => 'id']],
            [['outer_gear_id'], 'exist', 'skipOnError' => true, 'targetClass' => OuterGear::className(), 'targetAttribute' => ['outer_gear_id' => 'id']]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'event_id' => Yii::t('app', 'ID wydarzenia'),
            'outer_gear_id' => Yii::t('app', 'ID sprzÄ™tu zewnÄ™trznego'),
            'quantity' => Yii::t('app', 'Liczba sztuk'),
            'discount' => Yii::t('app', 'Discount'),
            'start_time' => Yii::t('app', 'PoczÄ…tek pracy'),
            'end_time' => Yii::t('app', 'Koniec pracy'),
            'type' => Yii::t('app', 'Typ'),
            'planned' => Yii::t('app', 'Planowany'),
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getEvent()
    {
        return $this->hasOne(\common\models\Event::className(), ['id' => 'event_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getOuterGear()
    {
        return $this->hasOne(\common\models\OuterGear::className(), ['id' => 'outer_gear_id']);
    }

    public function getOrder()
    {
        return $this->hasOne(\common\models\Order::className(), ['id' => 'order_id']);
    }

    public function getUser()
    {
        return $this->hasOne(\common\models\User::className(), ['id' => 'user_id']);
    }


}
