<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace common\models\base;

use Yii;
use yii\behaviors\BlameableBehavior;

/**
 * This is the base-model class for table "event_user".
 *
 * @property integer $id
 * @property integer $event_id
 * @property integer $user_id
 * @property string $start_time
 * @property string $end_time
 * @property integer $type
 * @property string $create_time
 * @property string $update_time
 * @property integer $creator_id
 *
 * @property \common\models\Event $event
 * @property \common\models\User $user
 * @property \common\models\User $creator
 * @property \common\models\EventUserRole[] $eventUserRoles
 * @property \common\models\UserEventRole[] $userEventRoles
 * @property string $aliasModel
 */
abstract class EventUser extends \common\components\BaseActiveRecord
{



    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'event_user';
    }


    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            [
                'class' => BlameableBehavior::className(),
                'createdByAttribute' => 'creator_id',
                'updatedByAttribute' => false,
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['event_id', 'user_id'], 'required'],
            [['event_id', 'user_id', 'type', 'new', 'edited'], 'integer'],
            [['start_time', 'end_time', 'create_time', 'update_time'], 'safe'],
            [['event_id', 'user_id'], 'unique', 'targetAttribute' => ['event_id', 'user_id'], 'message' => 'The combination of Event ID and User ID has already been taken.'],
            [['event_id'], 'exist', 'skipOnError' => true, 'targetClass' => Event::className(), 'targetAttribute' => ['event_id' => 'id']],
            [['user_id'], 'exist', 'skipOnError' => true, 'targetClass' => User::className(), 'targetAttribute' => ['user_id' => 'id']],
            [['creator_id'], 'exist', 'skipOnError' => true, 'targetClass' => User::className(), 'targetAttribute' => ['creator_id' => 'id']]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app', 'ID'),
            'event_id' => Yii::t('app', 'ID wydarzenia'),
            'user_id' => Yii::t('app', 'ID uÅ¼ytkownika'),
            'start_time' => Yii::t('app', 'PoczÄ…tek'),
            'end_time' => Yii::t('app', 'Koniec'),
            'type' => Yii::t('app', 'Typ'),
            'create_time' => Yii::t('app', 'Stworzono'),
            'update_time' => Yii::t('app', 'Zaktualizowano'),
            'creator_id' => Yii::t('app', 'ID autora'),
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getEvent()
    {
        return $this->hasOne(\common\models\Event::className(), ['id' => 'event_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUser()
    {
        return $this->hasOne(\common\models\User::className(), ['id' => 'user_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCreator()
    {
        return $this->hasOne(\common\models\User::className(), ['id' => 'creator_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getEventUserRoles()
    {
        return $this->hasMany(\common\models\EventUserRole::className(), ['event_user_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getUserEventRoles()
    {
        return $this->hasMany(\common\models\UserEventRole::className(), ['id' => 'user_event_role_id'])->viaTable('event_user_role', ['event_user_id' => 'id']);
    }




}
